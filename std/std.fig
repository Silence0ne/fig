builtin fn malloc(size: i32): i32;

fn len(str_ptr: i32[]): i32 {
    let length: i32 = 0;

    loop {
        if (str_ptr[length] == 0) { break; };

        length = length + 1;
    }

    return length;
}

fn copy_str(str: i32[]): i32 {
    let i: i32 = 0;
    let length: i32 = len(str);
    let new_str: i32[] = malloc(length + 1);

    loop {
        if (i == length) { break; };

        new_str[i] = str[i];

        i = i + 1;
    }

    return new_str;
}

fn cmp_string(lhs: i32[], rhs: i32[]): bool {
    let i: i32 = 0;

    loop {
        if (lhs[i] == 0) { break; }
        if (rhs[i] == 0) { break; }

        if (lhs[i] != rhs[i]) {
            return false;
        }

        i = i + 1;
    }

    return true;
}
