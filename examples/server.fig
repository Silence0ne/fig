external io {
    fn print_str(s: char[]);
    fn print_int(s: i32);
    fn print_char(c: char);
    fn read_until(fd: i32, buf: i32[], until: i32): i32;
}

builtin fn malloc(size: i32): i32;
builtin fn free(size: i32);

fn len(ptr: char[]): i32 {
    let length: i32 = 0;

    loop {
        if (ptr[length] == 0) { break; };

        length = length + 1;
    }

    return length;
}

fn copy_str(str: char[]): char[] {
    let i: i32 = 0;
    let length: i32 = len(str);
    let new_str: i32[] = malloc(length + 1);

    loop {
        if (i == length) { break; };

        new_str[i] = str[i];

        i = i + 1;
    }

    return new_str;
}


fn cmp_string(lhs: char[], rhs: char[]): bool {
    let i: i32 = 0;

    if (len(lhs) != len(rhs)) {
        return false;
    }

    loop {
        if (lhs[i] == 0) { break; }
        if (rhs[i] == 0) { break; }

        if (lhs[i] != rhs[i]) {
            return false;
        }

        i = i + 1;
    }

    return true;
}

fn http_path(request: char[]): char[] {
    let request_len: i32 = len(request);
    let i: i32 = 0;
    let path: char[] = malloc(10);
    let pathI: i32 = 1;

    path[0] = '/';

    loop {
        if (i == request_len) {
            break;
        }

        if (request[i] == '/') {
            i = i + 1;
            loop {
                if (request[i] == ' ') {
                    break;
                }

                path[pathI] = request[i];

                pathI = pathI + 1;
                i = i + 1;
            }

            break;
        }

        i = i + 1;
    }

    return path;
}

const Success: char[] = "HTTP/1.1 200 OK
Connection: Closed

";

export fn main (request: char[]): char[] {
    let path: char[] = http_path(request);

    print_str(path);
    
    if(cmp_string(path, "/fuck")) {
        return "HTTP/1.1 200 OK
Content-Type: text/html
Connection: Closed

<h1>FUCK</h1>";
    }

    return Success;
}
